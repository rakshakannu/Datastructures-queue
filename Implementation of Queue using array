// additional operations

size()
getfront()
getrear()
isfull()
isempty()

// simple implementation 
// enqueue -O(1)
// dequeue - O(n)
// maintain front at 0, rear at n-1

class queue{
  int size, cap;
  int[] arr;
  queue(int c)
  {
    cap =c;
    size=0;
    arr = new int[cap];
  }
  
  boolean isfull()
  {
    return (size==cap); // if the capacity of array is full
  }
  
  boolean isEmpty()
  {
    return (size==0);
  }
  
  void enqueue(int x)
  {
    if(isFull()) // isFull function has to be predefined
      return;
    else
      arr[size]=x;
      size++;
  }
  
  void deque()
  {
    if(isEmpty())
      return;
    for(int i=0;i<size-1;i++)
      arr[i] = arr[i+1] // this step cause time complexity to be O(n)
    size--;
  }
  
  int getFront()
  {
    if(isEmpty())
      return -1;
    else
      return 0;
  }
  
  int getRear()
  {
    if(isEmpty())
      return -1;
    else
      return 0;
  }
}

// efficient solution
// use a circular array

(didnt understand much)
